Introdução
Slide

    Definições
        Durante uma Conferencia da OTAN, em 1968, o termo "Engenharia de Software" foi cunhado pela primeira vez.
        
        O que é Engenharia de Software?

        É a área da computação destinada a propor soluções que permitam o desenvolvimento de sistemas de software de forma produtiva e com qualidade.

    O que se estuda em Engenharia de Software?

        A Engenharia de Software está dividida em 12 áres de conhecimento:
        
            1. Engenharia de Requisitos  2. Projeto de Software

            3. Construção de Software    4. Testes de Software

            5. Manutenção de Software    6. Gerência de Configuração

            7. Gerência de Projetos      8. Processos de Software

            9. Modelos de Software       10. Qualidade de Software

            11. Prática Profissional     12. Aspectos Econômicos

        Engenharia de Requisitos
            
            Parte em que é definida o que o sistema deve fazer e como ele deve fazer. Os requisitos são definidos em funcionais: ditam o que o software deve fazer, sua funcionalidades. E não-funcionais: que definem como e sob quais circuntâncias o sistema deve operar.


        Projeto de Software 

            É onde são definidas as principais unidades de código, no nível de interfaces que são dividias em providas e requeridas. As providas servem métodos públicos para as demais classes do sistema, essas classes também dependem de outras, que são justamentes as requeridas, também chamadas de dependências.

        Construção de Software

            Momento em que o sistema é codificado e são definidas as ferramentas que serão utilizadas, técnicas, compiladores, IDE's, etc.

        Testes de Software

            Consiste na testagem do programa em certos casos, a fim de verificar se está se comportando da maneira correta. Exemplos de testes: Teste de Unidade, Teste de Integração, Teste de Performance, Teste de Usabilidade,etc.

        Manutenção e Evolução de Software

            Manutenção corretiva: objetiva corrigir bugs reportados,

            Manutenção preventiva: objetiva corrigir bugs antes que afetem diretamente o funcionamento do sistema.

            Manutenção adaptativa: objetiva se adaptar ao ambiente ao seu redor e se moldar conforme as mudanças.

            Refactorings: modificações feitas no sistema que não aleteram as suas funcionalidades, mas buscam melhorar o código ou projeto.

        Gerência de Configuração

            Trata-se do versionamento do software e do controle das versões para prevenir problemas e facilitar operações e mudanças no software.

        Gerência de Projetos

            É  parte que trata das negociações de contrato com clientes, gerência de RH, riscos, acompanhamento dos concorrentes, marketing, finanças, etc.

        Processos de Desenvolvimento de Software

            Define quais práticas e atividades serão realizadas durante a construção do software. Existem dos tipos de processo que podem ser usados na construção de um software: Processo Waterfall e Processos Agéis.

        Modelos de Software

            Os modelos de software representam de maneira melhor um software, ajudando na construção e planejamento dos desenvolvedores. O modelo pode ser criado primeiro para facilitar o entedimento do software antes da implementação do código(Forward Engineering). Ou podem ser criados para facilitar o entendimento de um código já existente(Reverse Engineering).

        Qualidade de Software

            Qualidade externa leva em conta análise de fatores que podem ser aferidos sem analisar o código fonte. Qualidade interna leva em conta propriedades e características relacionadas com a implementação de um sistema.

        Prática Profissional

            Trata-se da responsabilida ética dos profissionais de Engenharia de Software, sua qualificação profissional, técnica e tecnológica.

        Aspectos Econômicos

            Tratam-se das várias decisões e questões econômicas que são ocorrem durante o desenvolvimento de um software. Além da precificação de cada étapa e do produto final.

Classificação de Sistemas de Software

    Bertrand Meyer propôs a distinção de softwares em 3 tipos:

        Sistemas Casuais: não tem a pressão de terem um alto nível de qualidade, podem ter alguns bugs que não comprometam o funcionamento da aplicação.
    
        Sistemas Acute(missão crítica): são sistemas em que os erros devem ser mínimos, pois os podem por em risco até vidas humanas. Exemplos: sistemas de controle de carro autonômo, usinas nucleares, trens de metrô, etc.

        Sistemas Business: são sistemas de aplicações corporativas, sistemas web, bibliotecas e frameworks de software, aplicações de uso geral e softwares básicos.

    